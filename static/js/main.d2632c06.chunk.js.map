{"version":3,"sources":["components/AnswerCard/AnswerCard.js","containers/Question/Question.js","containers/Quiz/Quiz.js","containers/QuizOptions/QuizOptions.js","App.js","serviceWorker.js","index.js"],"names":["AnswerCard","answer","handleAnswerClick","selected_answer","correct","reveal","correct_answer","className","onClick","e","style","backgroundColor","decodeString","str","replace","QuestionPage","state","question","incorrect_answers","shuffled_answers","user_correct","reveal_answers","setState","handleRevealAnswers","props","handleCorrectGuess","this","decodeIncorrect","map","x","sort","Math","random","componentDidMount","length","score","key","handleNextQuestion","React","Component","Quiz","questions","current_question","difficultly","subject","fetch","response","json","results","Question","QuizOptions","active_quiz","handleDifficultPick","event","difficulty","target","value","handleSubjectPick","handleGenerateQuiz","onInput","type","name","tabindex","App","paddingTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2632c06.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst AnswerCard = ({\r\n  answer,\r\n  handleAnswerClick,\r\n  selected_answer,\r\n  correct,\r\n  reveal,\r\n  correct_answer,\r\n}) => {\r\n  // Render the correct answer green\r\n  if (answer === correct_answer && reveal) {\r\n    return (\r\n      <div\r\n        className=\"ui raised segment\"\r\n        onClick={(e) => handleAnswerClick(answer, e)}\r\n        style={{ backgroundColor: \"green\" }}\r\n      >\r\n        <p>{answer}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // If user was wrong render their wrong answer red\r\n  if (answer === selected_answer && reveal && !correct) {\r\n    return (\r\n      <div\r\n        className=\"ui raised segment\"\r\n        onClick={(e) => handleAnswerClick(answer, e)}\r\n        style={{ backgroundColor: \"red\" }}\r\n      >\r\n        <p>{answer}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // If the user has selected this answer render it grey\r\n  if (answer === selected_answer) {\r\n    return (\r\n      <div\r\n        className=\"ui raised segment\"\r\n        onClick={(e) => handleAnswerClick(answer, e)}\r\n        style={{ backgroundColor: \"grey\" }}\r\n      >\r\n        <p>{answer}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"ui raised segment\"\r\n      onClick={(e) => handleAnswerClick(answer, e)}\r\n    >\r\n      <p>{answer}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnswerCard;\r\n","import React from \"react\";\r\nimport AnswerCard from \"../../components/AnswerCard/AnswerCard\";\r\n\r\nexport function decodeString(str) {\r\n  return str.replace(/&quot;/g, '\"').replace(/&#039;/g, \"'\").replace(/&eacute;/g,\"é\").replace(/&rsquo;/g,\"’\").replace(/&Atilde;/g,\"Ã\");\r\n}\r\n\r\nclass QuestionPage extends React.Component {\r\n  state = {\r\n      question: \"\",\r\n      correct_answer: \"\",\r\n      incorrect_answers: [],\r\n      shuffled_answers: [],\r\n      selected_answer: \"\",\r\n      user_correct: false,\r\n      reveal_answers: false\r\n    };\r\n\r\n  componentDidMount() {\r\n    const question = this.props.question\r\n    const decodeIncorrect = question.incorrect_answers.map((x) => {\r\n      return decodeString(x);\r\n    });\r\n\r\n    const shuffled_answers = [...decodeIncorrect, decodeString(question.correct_answer)].sort(\r\n      () => Math.random() - 0.5\r\n    );\r\n\r\n    this.setState({\r\n      question: decodeString(question.question),\r\n      correct_answer: decodeString(question.correct_answer),\r\n      incorrect_answers: decodeIncorrect,\r\n      shuffled_answers: shuffled_answers,\r\n      user_correct: false,\r\n      reveal_answers: false\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.question != decodeString(this.props.question.question)) {\r\n      this.componentDidMount()\r\n    }\r\n  }\r\n\r\n  handleAnswerClick = (answer) => {\r\n    if (!this.state.reveal_answers) {\r\n        this.setState({selected_answer: answer})\r\n        if (answer === this.state.correct_answer) {\r\n            this.setState({user_correct: true})\r\n            return true\r\n        } \r\n        this.setState({user_correct: false})\r\n        return false\r\n    }\r\n  }\r\n\r\n  handleRevealAnswers = () => {\r\n    if (!this.state.reveal_answers) {\r\n      this.setState({reveal_answers: true})\r\n      if (this.state.user_correct) {\r\n        this.props.handleCorrectGuess()\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {    \r\n    if (this.state.incorrect_answers.length === 0) {\r\n      return <div>Loading</div>;\r\n    }\r\n\r\n    const { score } = this.props\r\n\r\n    if (this.state.reveal_answers) {\r\n      return (\r\n        <div>\r\n          <h1>{this.state.question}</h1>\r\n          {this.state.shuffled_answers.map((answer, key) => (\r\n            <AnswerCard \r\n              answer={answer} \r\n              key={key}\r\n              handleAnswerClick={this.handleAnswerClick}\r\n              selected_answer={this.state.selected_answer}\r\n              correct={this.state.user_correct}\r\n              reveal={this.state.reveal_answers}\r\n              correct_answer={this.state.correct_answer}/>\r\n          ))}\r\n          <button className=\"ui primary button\" onClick={this.handleRevealAnswers}>\r\n              Reveal Answer!\r\n          </button>\r\n          <button className=\"ui button\" onClick={this.props.handleNextQuestion}>\r\n              Next Question\r\n          </button>\r\n          <h1>Your Score: {score}</h1>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <h1>{this.state.question}</h1>\r\n        {this.state.shuffled_answers.map((answer, key) => (\r\n          <AnswerCard \r\n            answer={answer} \r\n            key={key}\r\n            handleAnswerClick={this.handleAnswerClick}\r\n            selected_answer={this.state.selected_answer}\r\n            correct={this.state.user_correct}\r\n            reveal={this.state.reveal_answers}\r\n            correct_answer={this.state.correct_answer}/>\r\n        ))}\r\n        <button className=\"ui primary button\" onClick={this.handleRevealAnswers}>\r\n            Reveal Answer!\r\n        </button>\r\n        <h1>Your Score: {score}</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuestionPage;\r\n","import React from 'react';\r\nimport Question from '../Question/Question'\r\n\r\nclass Quiz extends React.Component {\r\n    state = {\r\n        score: 0,\r\n        questions: [],\r\n        current_question: 0\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { difficultly, subject } = this.props \r\n\r\n        const response = await fetch(\r\n            `https://opentdb.com/api.php?amount=10&category=${subject}&difficulty=${difficultly}&type=multiple`\r\n          );\r\n          const questions = await response.json();\r\n          this.setState({questions: questions.results})\r\n    }\r\n\r\n    handleCorrectGuess = () => {\r\n        this.setState({\r\n            score: this.state.score + 1\r\n        })\r\n    }\r\n\r\n    handleNextQuestion = () => {\r\n        this.setState({\r\n            current_question: this.state.current_question + 1\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {questions, score, current_question} = this.state\r\n\r\n        if (questions.length === 0) {\r\n            return ( \r\n                <div>\r\n                    Loading\r\n                </div>\r\n            )\r\n        }\r\n        \r\n        if (current_question < questions.length) {\r\n            return (\r\n                <Question \r\n                    score={score}\r\n                    handleCorrectGuess={this.handleCorrectGuess}\r\n                    question={questions[current_question]}\r\n                    handleNextQuestion={this.handleNextQuestion}\r\n                    />\r\n            )\r\n        } \r\n        return (\r\n            <div>\r\n                <h1>Your Score was { score } / 10</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz","import React from 'react';\r\nimport Quiz from '../Quiz/Quiz'\r\n\r\nclass QuizOptions extends React.Component {\r\n    state = {\r\n        difficultly: \"medium\",\r\n        subject: \"9\",\r\n        active_quiz: false\r\n    }\r\n\r\n    handleDifficultPick = (event) => {\r\n        this.setState({\r\n            difficulty: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubjectPick = (event) => {\r\n        this.setState({\r\n            subject: event.target.value\r\n        })\r\n    }\r\n\r\n    handleGenerateQuiz = () => {\r\n        this.setState({\r\n            active_quiz: true\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.active_quiz) {\r\n            return(\r\n                <Quiz \r\n                    difficultly={this.state.difficultly} \r\n                    subject={this.state.subject}/>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"ui raised very padded segment\">\r\n                <h1>Test your general knowledge!</h1>\r\n                <h3>Pick your specialist subject:</h3>\r\n                <select className=\"ui search dropdown\" onInput={this.handleSubjectPick}>\r\n                    <option value=\"9\">General knowledge</option>\r\n                    <option value=\"23\">History</option>\r\n                    <option value=\"24\">Politics</option>\r\n                    <option value=\"19\">Mathematics</option>\r\n                    <option value=\"21\">Sports</option>\r\n                    <option value=\"20\">Mythology</option>\r\n                    <option value=\"22\">Geography</option>\r\n                </select>\r\n                <h3>Select your difficultly:</h3>\r\n                <div className=\"ui form\">\r\n                    <div className=\"inline fields\">\r\n                        <div className=\"field\">\r\n                            <div className=\"ui radio checkbox\">\r\n                                <input \r\n                                    type=\"radio\" \r\n                                    value=\"easy\" \r\n                                    name=\"difficulty\" \r\n                                    tabindex=\"0\" \r\n                                    onInput={(e) => this.handleDifficultPick(e)} />\r\n                                <label>Easy</label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <div className=\"ui radio checkbox\">\r\n                                <input \r\n                                    type=\"radio\" \r\n                                    value=\"medium\" \r\n                                    name=\"difficulty\" \r\n                                    tabindex=\"0\"\r\n                                    onInput={(e) => this.handleDifficultPick(e)}/>\r\n                                <label>Medium</label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <div className=\"ui radio checkbox\">\r\n                                <input \r\n                                    type=\"radio\" \r\n                                    value=\"hard\" \r\n                                    name=\"difficulty\" \r\n                                    tabindex=\"0\" \r\n                                    onInput={(e) => this.handleDifficultPick(e)}/>\r\n                                <label>Hard</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button className=\"ui primary button\" onClick={this.handleGenerateQuiz}>\r\n                    Generate Quiz\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizOptions","import React from 'react';\nimport QuizOptions from './containers/QuizOptions/QuizOptions';\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App ui container\" style={{paddingTop: \"5%\"}}>\n      <QuizOptions />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}